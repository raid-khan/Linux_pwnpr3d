package se.kth.ics.pwnpr3d.layer1;

import org.apache.commons.math3.distribution.AbstractRealDistribution;
import org.apache.commons.math3.distribution.GammaDistribution;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import se.kth.ics.pwnpr3d.datatypes.BernoulliDistribution;
import se.kth.ics.pwnpr3d.datatypes.ImpactType;
import se.kth.ics.pwnpr3d.layer0.Asset;
import se.kth.ics.pwnpr3d.layer0.AttackStepMax;
import se.kth.ics.pwnpr3d.layer0.AttackStepMin;

import java.util.HashSet;
import java.util.Set;

public class Vulnerability extends Asset {
   protected ImpactType    impact;
   protected Agent         ownerAgent;
   protected Set<Identity> spoofedIdentities             = new HashSet<>();
   // A vuln can allow logical contact to an agent
   // private Set<Agent> accessedAgent = new HashSet<>();
   // A vuln can allow CIA breach of data
   private Set<Data> readData = new HashSet<>();
   private Set<Data> writeData = new HashSet<>();
   private Set<Data> dosData = new HashSet<>();

   protected AttackStepMin exploit;
   protected AttackStepMin read;
   protected AttackStepMin write;
   protected AttackStepMin denyService;
   protected AttackStepMin spoof;
   private AttackStepMin   access                        = new AttackStepMin("access", this);
   private AttackStepMin   authorized                    = new AttackStepMin("authorized", this);
   private AttackStepMin   localAccessVector             = new AttackStepMin("localAccessVector", this);
   private AttackStepMin   adjacentNetworkAccessVector   = new AttackStepMin("adjacentNetworkAccessVector", this);
   private AttackStepMin   authenticated                 = new AttackStepMin("authenticated", this);
   private AttackStepMax   discoverUnauthenticatedFromNetworkVulnerability;
   private AttackStepMax   discoverAuthenticatedFromNetworkVulnerability;
   private AttackStepMax   discoverUnauthenticatedFromAdjacentNetworkVulnerability;
   private AttackStepMax   discoverAuthenticatedFromAdjacentNetworkVulnerability;
   private AttackStepMax   discoverUnauthenticatedFromLocalVulnerability;
   private AttackStepMax   discoverAuthenticatedFromLocalVulnerability;

   public Vulnerability(String name, Agent superAsset) {
      this(name, superAsset, ImpactType.None);
   }

   public Vulnerability(String name, Agent superAsset, ImpactType impact) {
      this(name, superAsset, impact, new UniformRealDistribution(0.1, 0.2), new GammaDistribution(0.11, 100),
              new GammaDistribution(0.11, 100), new GammaDistribution(0.11, 100), new GammaDistribution(0.11, 100),
              new GammaDistribution(0.11, 100), new GammaDistribution(0.11, 100), new BernoulliDistribution(0.25),
              new BernoulliDistribution(0.25), new BernoulliDistribution(0.25), new BernoulliDistribution(0.25),
              new BernoulliDistribution(0.25));
   }

   public Vulnerability(String name, Agent superAsset, ImpactType impact, AbstractRealDistribution pTTCDiscovery,
                        AbstractRealDistribution pTTCDiscoverUnauthenticatedFromNetworkVulnerability,
                        AbstractRealDistribution pTTCDiscoverAuthenticatedFromNetworkVulnerability,
                        AbstractRealDistribution pTTCDiscoverUnauthenticatedFromAdjacentNetworkVulnerability,
                        AbstractRealDistribution pTTCDiscoverAuthenticatedFromAdjacentNetworkVulnerability,
                        AbstractRealDistribution pTTCDiscoverUnauthenticatedFromLocalVulnerability,
                        AbstractRealDistribution pTTCDiscoverAuthenticatedFromLocalVulnerability,
                        AbstractRealDistribution pTTCExploit, AbstractRealDistribution pTTCRead,
                        AbstractRealDistribution pTTCWrite,
                        AbstractRealDistribution pTTCDenyService, AbstractRealDistribution pTTCSpoof) {
      super(name, superAsset);

      ownerAgent = superAsset;
      ownerAgent.addVulnerabilities(this);
      this.impact = impact;

      discoverUnauthenticatedFromNetworkVulnerability =
              new AttackStepMax("discoverUnauthenticatedSpoofingFromNetworkVulnerability", this,
                      pTTCDiscoverUnauthenticatedFromNetworkVulnerability);
      discoverAuthenticatedFromNetworkVulnerability =
              new AttackStepMax("discoverAuthenticatedSpoofingFromNetworkVulnerability", this,
                      pTTCDiscoverAuthenticatedFromNetworkVulnerability);
      discoverUnauthenticatedFromAdjacentNetworkVulnerability =
              new AttackStepMax("discoverUnauthenticatedFromAdjacentNetworkVulnerability", this,
            pTTCDiscoverUnauthenticatedFromAdjacentNetworkVulnerability);
      discoverAuthenticatedFromAdjacentNetworkVulnerability =
              new AttackStepMax("discoverAuthenticatedFromAdjacentNetworkVulnerability", this,
            pTTCDiscoverAuthenticatedFromAdjacentNetworkVulnerability);
      discoverUnauthenticatedFromLocalVulnerability =
              new AttackStepMax("discoverUnauthenticatedFromLocalVulnerability", this,
                      pTTCDiscoverUnauthenticatedFromLocalVulnerability);
      discoverAuthenticatedFromLocalVulnerability =
              new AttackStepMax("discoverAuthenticatedFromLocalVulnerability", this,
                      pTTCDiscoverAuthenticatedFromLocalVulnerability);
      exploit = new AttackStepMin("exploitSpoofingVulnerabililty", this, pTTCExploit);
      read = new AttackStepMin("read", this, pTTCRead);
      write = new AttackStepMin("write", this, pTTCWrite);
      denyService = new AttackStepMin("denyService", this, pTTCDenyService);
      spoof = new AttackStepMin("spoof", this, pTTCSpoof);
   }

   @Override
   public void initializeCausality() {

      access.addChildren(discoverUnauthenticatedFromNetworkVulnerability, new GammaDistribution(0.05,0.1));
      authorized.addChildren(discoverUnauthenticatedFromNetworkVulnerability, new GammaDistribution(0.05,0.1));

      access.addChildren(discoverAuthenticatedFromNetworkVulnerability, new GammaDistribution(0.05,0.1));
      authorized.addChildren(discoverAuthenticatedFromNetworkVulnerability, new GammaDistribution(0.05,0.1));
      authenticated.addChildren(discoverAuthenticatedFromNetworkVulnerability, new GammaDistribution(0.05,0.1));

      access.addChildren(discoverUnauthenticatedFromAdjacentNetworkVulnerability, new GammaDistribution(0.05,0.1));
      authorized.addChildren(discoverUnauthenticatedFromAdjacentNetworkVulnerability, new GammaDistribution(0.05,0.1));
      adjacentNetworkAccessVector.addChildren(discoverUnauthenticatedFromAdjacentNetworkVulnerability, new GammaDistribution(0.05,0.1));

      access.addChildren(discoverAuthenticatedFromAdjacentNetworkVulnerability, new GammaDistribution(0.05,0.1));
      authorized.addChildren(discoverAuthenticatedFromAdjacentNetworkVulnerability, new GammaDistribution(0.05,0.1));
      authenticated.addChildren(discoverAuthenticatedFromAdjacentNetworkVulnerability, new GammaDistribution(0.05,0.1));
      adjacentNetworkAccessVector.addChildren(discoverAuthenticatedFromAdjacentNetworkVulnerability, new GammaDistribution(0.05,0.1));

      access.addChildren(discoverUnauthenticatedFromLocalVulnerability, new GammaDistribution(0.05,0.1));
      authorized.addChildren(discoverUnauthenticatedFromLocalVulnerability, new GammaDistribution(0.05,0.1));
      localAccessVector.addChildren(discoverUnauthenticatedFromLocalVulnerability, new GammaDistribution(0.05,0.1));

      access.addChildren(discoverAuthenticatedFromLocalVulnerability, new GammaDistribution(0.05,0.1));
      authorized.addChildren(discoverAuthenticatedFromLocalVulnerability, new GammaDistribution(0.05,0.1));
      authenticated.addChildren(discoverAuthenticatedFromLocalVulnerability, new GammaDistribution(0.05,0.1));
      localAccessVector.addChildren(discoverAuthenticatedFromLocalVulnerability, new GammaDistribution(0.05,0.1));

      discoverUnauthenticatedFromNetworkVulnerability.addChildren(exploit, new GammaDistribution(0.5,1.1));
      discoverAuthenticatedFromNetworkVulnerability.addChildren(exploit, new GammaDistribution(0.7,1.1));
      discoverUnauthenticatedFromAdjacentNetworkVulnerability.addChildren(exploit, new GammaDistribution(0.5,0.9));
      discoverAuthenticatedFromAdjacentNetworkVulnerability.addChildren(exploit, new GammaDistribution(0.7,1.2));
      discoverUnauthenticatedFromLocalVulnerability.addChildren(exploit, new GammaDistribution(0.5,0.8));
      discoverAuthenticatedFromLocalVulnerability.addChildren(exploit, new GammaDistribution(0.4,0.9));

      for (Identity spoofedIdentity : spoofedIdentities) {
         exploit.addChildren(spoofedIdentity.getCompromise(),new GammaDistribution(0.4, 0.7));
      }

      for(Data readableDatum : readData) {
         exploit.addChildren(readableDatum.getAuthorizedRead());
      }

      for(Data writableDatum : writeData) {
         exploit.addChildren(writableDatum.getAuthorizedWrite());
      }

      for(Data dosDatum : dosData) {
         exploit.addChildren(dosDatum.getDenyService());
      }

      exploit.addChildren(ownerAgent.getDenyService(), new GammaDistribution(0.5,0.5));

      super.initializeCausality();
   }

   /**
    * Getters & Setters
    **/

   public void addReadableData(Data readableData) {
      readData.add(readableData);
   }

   public void addWritableData(Data writableData) {
      writeData.add(writableData);
   }

   public void addDosData(Data dosData) {
      this.dosData.add(dosData);
   }

   public ImpactType getImpact() {
      return impact;
   }

   public void setImpact(ImpactType impact) {
      this.impact = impact;
   }

   public AttackStepMin getAccess() {
      return access;
   }

   public AttackStepMin getAuthorized() {
      return authorized;
   }

   public Set<Identity> getSpoofedIdentities() {
      return spoofedIdentities;
   }

   public void addSpoofedIdentity(Identity spoofedIdentity) {
      spoofedIdentities.add(spoofedIdentity);
   }

   public AttackStepMin getExploit() {
      return exploit;
   }

   public AttackStepMin getRead() {
      return read;
   }

   public AttackStepMin getWrite() {
      return write;
   }

   public AttackStepMin getSpoof() {
      return spoof;
   }

}
